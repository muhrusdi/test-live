{"version":3,"sources":["webpack:///./src/containers/HelpCenter/TabContentList/index.jsx","webpack:///./src/containers/HelpCenter/index.jsx","webpack:///./src/components/Seo/index.jsx"],"names":["Component","TabContentWrapper","_ref6","data","console","log","Object","core_browser_esm","css","HelpCenter_ref","HelpCenter","props","_this","_Component","call","this","emitEmpty","setState","searchValue","getSearchResults","query","window","__LUNR__","lunrIndex","index","search","map","_ref7","ref","store","onChangeSearch","e","q","target","value","results","handleClick","currentTarget","childNodes","style","height","state","render","TabPane","tabs_default","a","suffix","styled_base_browser_esm","_ref8","theme","color","primary","icon_default","type","onClick","pageContext","Layout","Seo","title","description","keywords","index_es","md","gutter","tag","HelpCenter_ref2","lib_index_es","id","HelpCenter_ref3","input_default","className","_ref4","prefix","size","onChange","placeholder","length","_ref5","item","ModanaLink","to","slug","defaultActiveKey","secondary","tab","key","HelpCenter_TabContentWrapper","SEO","_ref","lang","meta","metaDescription","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","concat","join","defaultProps","propTypes","PropTypes","string","array","arrayOf","isRequired"],"mappings":"+gBAO6BA,uECMvBC,EAAoB,SAAAC,GAAY,IAAVC,EAAUD,EAAVC,KAE1B,OADAC,QAAQC,IAAI,UAAQF,GAElBG,OAAAC,EAAA,EAAAD,CAAA,OAAKE,IAAGC,wZAUNC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OACjBA,EAAAC,EAAAC,KAAAC,KAAMJ,IAANI,MAQFC,UAAY,WACVJ,EAAKK,SAAS,CAACC,YAAa,MAVXN,EAanBO,iBAAmB,SAACC,GAClB,IAAKA,IAAUC,OAAOC,SAAU,MAAO,GACvC,IAAMC,EAAaF,OAAOC,SAAP,GAEnB,OADgBC,EAAUC,MAAMC,OAAOL,GACxBM,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,IAAH,OAAaL,EAAUM,MAAMD,MAjB/BhB,EAoBnBkB,eAAiB,SAAAC,GACf,IAAMC,EAAID,EAAEE,OAAOC,MACbC,EAAUvB,EAAKO,iBAAiBa,GACtCpB,EAAKK,SAAS,CAACC,YAAac,EAAGG,aAvBdvB,EA0BnBwB,YAAc,SAAAL,GACZA,EAAEM,cAAcC,WAAW,GAAGC,MAAMC,OAAS,QAzB7C5B,EAAK6B,MAAQ,CACXvB,YAAa,GACbE,MAAK,GACLe,QAAS,IALMvB,8BA8BnB8B,kBAAS,IACCC,EADDC,EAAAC,EACCF,QAUFG,GATexC,OAAAyC,EAAA,EAAAzC,CAAA,OAAH2B,OAAA,YAAG3B,CAAH,cACF,SAAA0C,GAAA,OAAAA,EAAEC,MAAiBC,MAAMC,SADvB,+EASHpC,KAAK0B,MAAMvB,YAAcZ,OAAAC,EAAA,EAAAD,CAAA8C,EAAAP,EAAA,CAAMQ,KAAK,eAAeC,QAASvC,KAAKC,YAAgB,MAuBxFb,EAASY,KAAKJ,MAAM4C,YAApBpD,KA6BR,OACEG,OAAAC,EAAA,EAAAD,CAACkD,EAAA,EAAD,KACElD,OAAAC,EAAA,EAAAD,CAAA,OAAKE,IAAK,SAAAyC,GAAK,OAAIzC,WAAJ,eACCyC,EAAMC,MAAMC,QADb,iFASb7C,OAAAC,EAAA,EAAAD,CAACmD,EAAA,EAAD,CACEC,MAAM,cACNC,YAAa,CAAC,UACdC,SAAU,oCACZtD,OAAAC,EAAA,EAAAD,CAACuD,EAAA,EAAD,CAAWC,IAAE,EAACC,OAAQ,IACpBzD,OAAAC,EAAA,EAAAD,CAAA,YACEA,OAAAC,EAAA,EAAAD,CAAA,WACEA,OAAAC,EAAA,EAAAD,CAACuD,EAAA,EAAD,CACEG,IAAI,KACJX,KAAK,WACLH,MAAM,OACN1C,IAAGyD,GAEH3D,OAAAC,EAAA,EAAAD,CAAC4D,EAAA,EAAD,CAAkBC,GAAG,8BAEvB7D,OAAAC,EAAA,EAAAD,CAAA,OAAKE,IAAG4D,GACN9D,OAAAC,EAAA,EAAAD,CAAA+D,EAAAxB,EAAA,CAAOyB,UAAU,oBAAoB9D,IAAG+D,EAKtCC,OAAQlE,OAAAC,EAAA,EAAAD,CAAA8C,EAAAP,EAAA,CAAMQ,KAAK,WACnBoB,KAAK,QACLC,SAAU3D,KAAKe,eACfI,MAAOnB,KAAK0B,MAAMvB,YAClB4B,OAAQA,EACR6B,YAAY,+BAGZ5D,KAAK0B,MAAMN,QAAQyC,OACjBtE,OAAAC,EAAA,EAAAD,CAAA,OAAKE,IAAGqE,GAwBNvE,OAAAC,EAAA,EAAAD,CAAA,UAEIS,KAAK0B,MAAMN,QAAQT,IAAI,SAAAoD,GAAI,OACzBxE,OAAAC,EAAA,EAAAD,CAAA,UACEA,OAAAC,EAAA,EAAAD,CAACyE,EAAA,EAAD,CAAYC,GAAIF,EAAKG,MAAOH,EAAKpB,YAKlC,UAOvBpD,OAAAC,EAAA,EAAAD,CA7GiB,kBACnBA,OAAAC,EAAA,EAAAD,CAACuD,EAAA,EAAD,CAAWE,OAAQ,GAAID,IAAE,GACvBxD,OAAAC,EAAA,EAAAD,CAAAsC,EAAAC,EAAA,CAAMqC,iBAAiB,IAAI1E,IAAK,SAAAyC,GAAK,OAAIzC,WAAJ,oIASbyC,EAAMC,MAAMiC,UATC,mFAetBlC,EAAMC,MAAMiC,UAfU,SAmBnC7E,OAAAC,EAAA,EAAAD,CAACqC,EAAD,CAASyC,IAAI,MAAMC,IAAI,KACrB/E,OAAAC,EAAA,EAAAD,CAACgF,EAAD,CAAmBnF,KAAMA,QAuF7B,WA/KiBH,aAsLVU,kGC5MT6E,EAAM,SAAAC,GAAkD,IAA/C7B,EAA+C6B,EAA/C7B,YAAa8B,EAAkCD,EAAlCC,KAAMC,EAA4BF,EAA5BE,KAAM9B,EAAsB4B,EAAtB5B,SAAUF,EAAY8B,EAAZ9B,MAC1CiC,EACJhC,EACF,OACErD,OAAAsF,EAAA,EAAAtF,CAACuF,EAAAhD,EAAD,CACEiD,eAAgB,CACdL,QAEF/B,MAAOA,EACPqC,cAAa,cACbL,KAAM,CACJ,CACEM,KAAM,cACNC,QAASN,GAEX,CACEO,SAAU,WACVD,QAASvC,GAEX,CACEwC,SAAU,iBACVD,QAASN,GAEX,CACEO,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAAS,WAEX,CACED,KAAM,gBACNC,QAASvC,GAEX,CACEsC,KAAM,sBACNC,QAASN,IAGVQ,OACCvC,EAASgB,OAAS,EACd,CACEoB,KAAM,WACNC,QAASrC,EAASwC,KAAK,OAEzB,IAELD,OAAOT,MAKhBH,EAAIc,aAAe,CACjBZ,KAAM,KACNC,KAAM,GACN9B,SAAU,IAGZ2B,EAAIe,UAAY,CACd3C,YAAa4C,IAAUC,OACvBf,KAAMc,IAAUC,OAChBd,KAAMa,IAAUE,MAChB7C,SAAU2C,IAAUG,QAAQH,IAAUC,QACtC9C,MAAO6C,IAAUC,OAAOG,YAGXpB","file":"component---src-containers-help-center-index-jsx-ec4f72011d614b1150e9.js","sourcesContent":["import React, { Component } from 'react'\nimport { css } from '@emotion/core'\nimport { Icon } from 'antd'\nimport { Link } from 'gatsby'\nimport { FormattedMessage } from 'react-intl'\nimport ModanaLink from 'Components/ModanaLink'\n\nclass TabContentList extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isActive: false\n    }\n  }\n  \n  handleClick = () => {\n    this.setState(({isActive}) => ({isActive: !isActive}))\n  }\n  render() {\n    const { data } = this.props\n    return (\n      <div css={css`\n        padding: 10px;\n        cursor: pointer;\n      `} onClick={this.handleClick}>\n        <div css={css`\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        `}>\n          <h4 css={theme => css`\n            margin: 0;\n            color: ${theme.color.primary};`}>\n            <FormattedMessage id={`side-title-${data.node.frontmatter.title}`}/>\n          </h4>\n          <Icon css={theme => css`color: ${theme.color.secondary};`} type={this.state.isActive ? 'minus' : 'plus'}/>\n        </div>\n        <div ref={node => this.nodeEl = node} css={css`\n          transition: height .3s ease;\n          height: ${this.state.isActive ? this.nodeEl.scrollHeight : 0}px; \n          overflow: hidden;`}>\n          <ul css={css`\n            list-style: none;\n            padding: 20px;\n            margin: 0;\n            li {\n              padding: 6px;\n              a {\n                color: #444;\n                display: block;\n              }\n            }\n          `}>\n            {\n              data.node.frontmatter.headings.map((item, i) => (\n                <li key={i}>\n                  <ModanaLink to={data.node.fields.slug}>\n                    <FormattedMessage id={item}/>\n                  </ModanaLink>\n                </li>\n              ))\n            }\n          </ul>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TabContentList","import React, { Component } from 'react'\nimport styled from '@emotion/styled'\nimport { css } from '@emotion/core'\nimport { Tabs, Input, Icon } from 'antd'\nimport { Container, Typography } from 'reus'\nimport Layout from 'Containers/Layout'\nimport { StaticQuery, graphql, Link } from 'gatsby'\nimport TabContentList from './TabContentList'\nimport { FormattedMessage } from 'react-intl'\nimport Helmet from 'react-helmet'\nimport ModanaLink from 'Components/ModanaLink'\nimport SEO from 'Components/Seo'\n\nconst TabContentWrapper = ({data}) => {\n  console.log('--->', data)\n  return (\n    <div css={css`margin-top: 30px;`}>\n      {\n        // data.map((item, i) => (\n        //   <TabContentList key={i} data={item}/>\n        // ))\n      }\n    </div>\n  )\n}\n\nclass HelpCenter extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      searchValue: '',\n      query: ``,\n      results: []\n    }\n  }\n\n  emitEmpty = () => {\n    this.setState({searchValue: ''})\n  }\n\n  getSearchResults = (query) => {\n    if (!query || !window.__LUNR__) return []\n    const lunrIndex =  window.__LUNR__['en'];\n    const results = lunrIndex.index.search(query) // you can  customize your search , see https://lunrjs.com/guides/searching.html\n    return results.map(({ ref }) => lunrIndex.store[ref])\n}\n\n  onChangeSearch = e => {\n    const q = e.target.value\n    const results = this.getSearchResults(q)\n    this.setState({searchValue: q, results})\n  }\n\n  handleClick = e => {\n    e.currentTarget.childNodes[1].style.height = 'auto'\n  }\n\n  render() {\n    const { TabPane } = Tabs\n    const StyledBanner = styled.div`\n      background: ${({theme}) => theme.color.primary};\n      form {\n        height: 300px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n    `\n    const suffix = this.state.searchValue ? <Icon type=\"close-circle\" onClick={this.emitEmpty} /> : null;\n    const Banner = () => (\n      <div css={css`\n        background: ${({theme}) => theme.color.primary};\n        form {\n          height: 300px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n      `}>\n        <Container md gutter={22}>\n          <form>\n            <Input \n              onChange={this.onChangeSearch} \n              value={this.state.searchValue}\n              suffix={suffix} \n              placeholder={<FormattedMessage id=\"help-center-search-placeholder\"/>}/>\n          </form>\n        </Container>\n      </div>\n    )\n\n    const { data } = this.props.pageContext\n    const  TabsContent = () => (\n      <Container gutter={22} md>\n        <Tabs defaultActiveKey=\"1\" css={theme => css`\n          top: -44px;\n          .ant-tabs-nav-scroll {\n            text-align: center;\n          }\n          .ant-tabs-bar {\n            border-bottom: none;\n          }\n          .ant-tabs-ink-bar-animated {\n            background-color: ${theme.color.secondary};\n          }\n          .ant-tabs-tab {\n            text-transform: uppercase;\n            color: #fff;\n            &.ant-tabs-tab-active {\n              color: ${theme.color.secondary};\n            }\n          }\n        `}>\n          <TabPane tab=\"FAQ\" key=\"1\">\n            <TabContentWrapper data={data}/>\n          </TabPane>\n        </Tabs>\n      </Container>\n    )\n    \n    return (\n      <Layout>\n        <div css={theme => css`\n          background: ${theme.color.primary};\n          form {\n            height: 300px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n          }\n        `}>\n          <SEO \n            title=\"Help Center\" \n            description={[\"Modana\" ]}\n            keywords={[`businesses`, `productive`, `hrd`]} />\n          <Container md gutter={22}>\n            <form>\n              <div>\n                <Typography\n                  tag=\"h3\"\n                  type=\"headline\"\n                  color=\"#fff\"\n                  css={css`padding-bottom: 20px;`}\n                >\n                  <FormattedMessage id=\"help-center-banner-title\"/>\n                </Typography>\n                <div css={css`position: relative;`}>\n                  <Input className=\"input-search-docs\" css={css`\n                    input {\n                      border-radius: 21px;\n                    }\n                  `}\n                    prefix={<Icon type=\"search\" />}\n                    size=\"large\"\n                    onChange={this.onChangeSearch} \n                    value={this.state.searchValue}\n                    suffix={suffix} \n                    placeholder=\"Type your question here...\"\n                  />\n                  {\n                    this.state.results.length ?\n                      <div css={css`\n                        position: absolute;\n                        left: 0;\n                        right: 0;\n                        z-index: 10;\n                        top: 60px;\n                        ul {\n                          list-style: none;\n                          background: #fff;\n                          border-radius: 20px;\n                          padding: 13px 21px;\n                          box-shadow: 0px 3px 24px #a0a0a06e;\n                          li {\n                            padding: 10px 0;\n                            a {\n                              font-weight: bold;\n                              color: #333;\n                            }\n                            p {\n                              color: #717171;\n                            }\n                          }\n                        }\n                      `}>\n                        <ul>\n                          {\n                            this.state.results.map(item => (\n                              <li>\n                                <ModanaLink to={item.slug}>{item.title}</ModanaLink>\n                              </li>\n                            ))\n                          }\n                        </ul>\n                      </div> : null\n                  }\n                </div>\n              </div>\n            </form>\n          </Container>\n        </div>\n        <TabsContent/>\n      </Layout>\n          \n    )\n  }\n}\n\nexport default HelpCenter\n\n// export const pageQuery = graphql`\n//   query($lang: String!) {\n//     allMarkdownRemark(sort: { order: ASC, fields: [frontmatter___title]}, filter: {frontmatter: {lang: {eq: $lang}}}) {\n//       edges {\n//         node {\n//           fields {\n//             slug\n//           }\n//           frontmatter {\n//             title\n//             headings\n//             lang\n//           }\n//           headings {\n//             value\n//             depth\n//           }\n//         }\n//       }\n//     }\n//   }\n// `","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\n\nconst SEO = ({ description, lang, meta, keywords, title }) => {\n  const metaDescription =\n    description\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | Modana`}\n      meta={[\n        {\n          name: 'description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:title',\n          content: title,\n        },\n        {\n          property: 'og:description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:type',\n          content: 'website',\n        },\n        {\n          name: 'twitter:card',\n          content: 'summary',\n        },\n        {\n          name: 'twitter:creator',\n          content: '@modana',\n        },\n        {\n          name: 'twitter:title',\n          content: title,\n        },\n        {\n          name: 'twitter:description',\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: 'keywords',\n                content: keywords.join(', '),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}