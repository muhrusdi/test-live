{"version":3,"sources":["webpack:///./src/containers/HelpCenter/TabContentList/index.jsx","webpack:///./src/containers/HelpCenter/index.jsx","webpack:///./src/pages/help-center/index.jsx","webpack:///./src/components/Seo/index.jsx"],"names":["TabContentList","props","_this","_Component","call","this","handleClick","setState","_ref4","isActive","state","render","_this2","data","Object","core_browser_esm","css","_ref","onClick","_ref2","theme","color","primary","lib_index_es","id","node","frontmatter","title","icon_default","a","secondary","type","ref","nodeEl","scrollHeight","_ref3","headings","map","item","i","key","ModanaLink","to","fields","slug","Component","TabContentWrapper","_ref6","HelpCenter_ref","HelpCenter_TabContentList","HelpCenter","emitEmpty","searchValue","getSearchResults","query","window","__LUNR__","lunrIndex","index","search","_ref7","store","onChangeSearch","e","q","target","value","results","currentTarget","childNodes","style","height","TabPane","tabs_default","suffix","styled_base_browser_esm","_ref8","pageContext","Layout","Seo","description","keywords","index_es","md","gutter","tag","HelpCenter_ref2","HelpCenter_ref3","input_default","className","prefix","size","onChange","placeholder","length","_ref5","defaultActiveKey","tab","HelpCenter_TabContentWrapper","__webpack_require__","r","__webpack_exports__","Containers_HelpCenter__WEBPACK_IMPORTED_MODULE_0__","SEO","lang","meta","metaDescription","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","concat","join","defaultProps","propTypes","PropTypes","string","array","arrayOf","isRequired"],"mappings":"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","file":"component---src-pages-help-center-index-jsx-7f00810a05e5b29c1160.js","sourcesContent":["import React, { Component } from 'react'\nimport { css } from '@emotion/core'\nimport { Icon } from 'antd'\nimport { Link } from 'gatsby'\nimport { FormattedMessage } from 'react-intl'\nimport ModanaLink from 'Components/ModanaLink'\n\nclass TabContentList extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isActive: false\n    }\n  }\n  \n  handleClick = () => {\n    this.setState(({isActive}) => ({isActive: !isActive}))\n  }\n  render() {\n    const { data } = this.props\n    return (\n      <div css={css`\n        padding: 10px;\n        cursor: pointer;\n      `} onClick={this.handleClick}>\n        <div css={css`\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        `}>\n          <h4 css={theme => css`\n            margin: 0;\n            color: ${theme.color.primary};`}>\n            <FormattedMessage id={`side-title-${data.node.frontmatter.title}`}/>\n          </h4>\n          <Icon css={theme => css`color: ${theme.color.secondary};`} type={this.state.isActive ? 'minus' : 'plus'}/>\n        </div>\n        <div ref={node => this.nodeEl = node} css={css`\n          transition: height .3s ease;\n          height: ${this.state.isActive ? this.nodeEl.scrollHeight : 0}px; \n          overflow: hidden;`}>\n          <ul css={css`\n            list-style: none;\n            padding: 20px;\n            margin: 0;\n            li {\n              padding: 6px;\n              a {\n                color: #444;\n                display: block;\n              }\n            }\n          `}>\n            {\n              data.node.frontmatter.headings.map((item, i) => (\n                <li key={i}>\n                  <ModanaLink to={data.node.fields.slug}>\n                    <FormattedMessage id={item}/>\n                  </ModanaLink>\n                </li>\n              ))\n            }\n          </ul>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TabContentList","import React, { Component } from 'react'\nimport styled from '@emotion/styled'\nimport { css } from '@emotion/core'\nimport { Tabs, Input, Icon } from 'antd'\nimport { Container, Typography } from 'reus'\nimport Layout from 'Containers/Layout'\nimport { StaticQuery, graphql, Link } from 'gatsby'\nimport TabContentList from './TabContentList'\nimport { FormattedMessage } from 'react-intl'\nimport Helmet from 'react-helmet'\nimport ModanaLink from 'Components/ModanaLink'\nimport SEO from 'Components/Seo'\n\nconst TabContentWrapper = ({data}) => {\n  return (\n    <div css={css`margin-top: 30px;`}>\n      {\n        data && data.map((item, i) => (\n          <TabContentList key={i} data={item}/>\n        ))\n      }\n    </div>\n  )\n}\n\nclass HelpCenter extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      searchValue: '',\n      query: ``,\n      results: []\n    }\n  }\n\n  emitEmpty = () => {\n    this.setState({searchValue: ''})\n  }\n\n  getSearchResults = (query) => {\n    if (!query || !window.__LUNR__) return []\n    const lunrIndex =  window.__LUNR__['en'];\n    const results = lunrIndex.index.search(query) // you can  customize your search , see https://lunrjs.com/guides/searching.html\n    return results.map(({ ref }) => lunrIndex.store[ref])\n}\n\n  onChangeSearch = e => {\n    const q = e.target.value\n    const results = this.getSearchResults(q)\n    this.setState({searchValue: q, results})\n  }\n\n  handleClick = e => {\n    e.currentTarget.childNodes[1].style.height = 'auto'\n  }\n\n  render() {\n    const { TabPane } = Tabs\n    const StyledBanner = styled.div`\n      background: ${({theme}) => theme.color.primary};\n      form {\n        height: 300px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n    `\n    const suffix = this.state.searchValue ? <Icon type=\"close-circle\" onClick={this.emitEmpty} /> : null;\n    const Banner = () => (\n      <div css={css`\n        background: ${({theme}) => theme.color.primary};\n        form {\n          height: 300px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n      `}>\n        <Container md gutter={22}>\n          <form>\n            <Input \n              onChange={this.onChangeSearch} \n              value={this.state.searchValue}\n              suffix={suffix} \n              placeholder={<FormattedMessage id=\"help-center-search-placeholder\"/>}/>\n          </form>\n        </Container>\n      </div>\n    )\n\n    const { data } = this.props.pageContext\n    const  TabsContent = () => (\n      <Container gutter={22} md>\n        <Tabs defaultActiveKey=\"1\" css={theme => css`\n          top: -44px;\n          .ant-tabs-nav-scroll {\n            text-align: center;\n          }\n          .ant-tabs-bar {\n            border-bottom: none;\n          }\n          .ant-tabs-ink-bar-animated {\n            background-color: ${theme.color.secondary};\n          }\n          .ant-tabs-tab {\n            text-transform: uppercase;\n            color: #fff;\n            &.ant-tabs-tab-active {\n              color: ${theme.color.secondary};\n            }\n          }\n        `}>\n          <TabPane tab=\"FAQ\" key=\"1\">\n            <TabContentWrapper data={data}/>\n          </TabPane>\n        </Tabs>\n      </Container>\n    )\n    \n    return (\n      <Layout>\n        <div css={theme => css`\n          background: ${theme.color.primary};\n          form {\n            height: 300px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n          }\n        `}>\n          <SEO \n            title=\"Help Center\" \n            description={[\"Modana\" ]}\n            keywords={[`businesses`, `productive`, `hrd`]} />\n          <Container md gutter={22}>\n            <form>\n              <div>\n                <Typography\n                  tag=\"h3\"\n                  type=\"headline\"\n                  color=\"#fff\"\n                  css={css`padding-bottom: 20px;`}\n                >\n                  <FormattedMessage id=\"help-center-banner-title\"/>\n                </Typography>\n                <div css={css`position: relative;`}>\n                  <Input className=\"input-search-docs\" css={css`\n                    input {\n                      border-radius: 21px;\n                    }\n                  `}\n                    prefix={<Icon type=\"search\" />}\n                    size=\"large\"\n                    onChange={this.onChangeSearch} \n                    value={this.state.searchValue}\n                    suffix={suffix} \n                    placeholder=\"Type your question here...\"\n                  />\n                  {\n                    this.state.results.length ?\n                      <div css={css`\n                        position: absolute;\n                        left: 0;\n                        right: 0;\n                        z-index: 10;\n                        top: 60px;\n                        ul {\n                          list-style: none;\n                          background: #fff;\n                          border-radius: 20px;\n                          padding: 13px 21px;\n                          box-shadow: 0px 3px 24px #a0a0a06e;\n                          li {\n                            padding: 10px 0;\n                            a {\n                              font-weight: bold;\n                              color: #333;\n                              display: block;\n                            }\n                            p {\n                              color: #717171;\n                            }\n                          }\n                        }\n                      `}>\n                        <ul>\n                          {\n                            this.state.results.map(item => (\n                              <li>\n                                <ModanaLink to={item.slug}>{item.title}</ModanaLink>\n                              </li>\n                            ))\n                          }\n                        </ul>\n                      </div> : null\n                  }\n                </div>\n              </div>\n            </form>\n          </Container>\n        </div>\n        <TabsContent/>\n      </Layout>\n          \n    )\n  }\n}\n\nexport default HelpCenter\n\n// export const pageQuery = graphql`\n//   query($lang: String!) {\n//     allMarkdownRemark(sort: { order: ASC, fields: [frontmatter___title]}, filter: {frontmatter: {lang: {eq: $lang}}}) {\n//       edges {\n//         node {\n//           fields {\n//             slug\n//           }\n//           frontmatter {\n//             title\n//             headings\n//             lang\n//           }\n//           headings {\n//             value\n//             depth\n//           }\n//         }\n//       }\n//     }\n//   }\n// `","import HelpCenter from 'Containers/HelpCenter'\n\nexport default HelpCenter","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\n\nconst SEO = ({ description, lang, meta, keywords, title }) => {\n  const metaDescription =\n    description\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | Modana`}\n      meta={[\n        {\n          name: 'description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:title',\n          content: title,\n        },\n        {\n          property: 'og:description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:type',\n          content: 'website',\n        },\n        {\n          name: 'twitter:card',\n          content: 'summary',\n        },\n        {\n          name: 'twitter:creator',\n          content: '@modana',\n        },\n        {\n          name: 'twitter:title',\n          content: title,\n        },\n        {\n          name: 'twitter:description',\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: 'keywords',\n                content: keywords.join(', '),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}